datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DRIVER
  OPERATION
  GENERAL
  ADMIN
  SUPERADMIN
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  PROBATION
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId              String                   @unique
  name                    String
  lineUserId              String?                  @unique
  nickname                String?
  department              Department @relation(fields: [departmentId], references: [id]) 
  departmentId            String  @db.ObjectId
  role                    String
  company                 String?
  employeeType            EmployeeType             @default(PROBATION)
  isGovernmentRegistered  Boolean                  @default(false)
  profilePictureUrl       String?
  shiftId                 String    @db.ObjectId
  assignedShift           Shift     @relation("UserAssignedShift", fields: [shiftId], references: [id])
  overtimeHours           Float     @default(0)
  attendances             Attendance[]
  shiftAdjustmentRequests ShiftAdjustmentRequest[]
  leaveRequests           LeaveRequest[]
  sickLeaveBalance        Int                      @default(30)
  businessLeaveBalance    Int                      @default(3)
  annualLeaveBalance      Int                      @default(6)
  overtimeLeaveBalance    Int                      @default(0)
  isPreImported           Boolean                  @default(false)
  overtimeRequests        OvertimeRequest[]
  approvedOvertimeRequests OvertimeRequest[]       @relation("OvertimeApprover")
  approvedOvertimes       ApprovedOvertime[]
  potentialOvertimes      PotentialOvertime[]
  payrollProcessingResults PayrollProcessingResult[]
  checkPoints             CheckPoint[]
  timeEntries             TimeEntry[]
  isRegistrationComplete  Boolean   @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Shift {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  shiftCode               String                   @unique
  name                    String
  startTime               String
  endTime                 String
  workDays                Int[]
  departments             Department []
  assignedUsers           User[]                   @relation("UserAssignedShift")
  shiftAdjustmentRequests ShiftAdjustmentRequest[] @relation("RequestedShift")
}

model ShiftAdjustmentRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId            String  
  user              User @relation(fields: [employeeId], references: [employeeId])
  requestedShiftId  String   @db.ObjectId
  requestedShift    Shift    @relation("RequestedShift", fields: [requestedShiftId], references: [id])
  date              DateTime
  reason            String
  status            String   // 'pending', 'approved', 'rejected'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LeaveRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId            String   
  user              User @relation(fields: [employeeId], references: [employeeId])
  leaveType         String
  leaveFormat       String
  reason            String
  useOvertimeHours  Boolean 
  startDate         DateTime
  endDate           DateTime
  status            String
  fullDayCount      Float
  approverId        String?  @db.ObjectId
  denialReason      String?
  resubmitted       Boolean  @default(false)
  originalRequestId String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@index([employeeId, startDate, endDate, status])
}

model OvertimeRequest {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  employeeId              String   
  user              User @relation(fields: [employeeId], references: [employeeId])
  date                DateTime
  startTime           String // Store as HH:mm
  endTime             String // Store as HH:mm
  status              String // 'pending', 'approved', 'rejected'
  reason              String?
  denialReason        String?
  approverId          String?
  approver            User?    @relation("OvertimeApprover", fields: [approverId], references: [id])
  resubmitted         Boolean  @default(false)
  originalRequestId   String?
  originalRequest     OvertimeRequest? @relation("ResubmittedOvertimeRequest", fields: [originalRequestId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resubmittedRequests OvertimeRequest[] @relation("ResubmittedOvertimeRequest")
  timeEntries         TimeEntry[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  @@index([employeeId, date, status])
}

model ApprovedOvertime {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId     String  
  user              User @relation(fields: [employeeId], references: [employeeId])
  startTime  DateTime
  endTime    DateTime
  reason     String?
  status     String
  approvedBy String
  approvedAt DateTime
  date       DateTime
}

model Attendance {
  id                   String    @id @default(cuid()) @map("_id")
  employeeId               String   
  date                 DateTime
  checkInTime          DateTime?
  checkOutTime         DateTime? 
  isOvertime           Boolean @default(false)
  overtimeStartTime    DateTime?
  overtimeEndTime      DateTime?
  overtimeDuration  Float?
  isEarlyCheckIn    Boolean?
  isLateCheckIn     Boolean?
  isLateCheckOut    Boolean?
  checkInLocation      Json?
  checkOutLocation     Json?
  checkInAddress       String?
  checkOutAddress      String?
  checkInReason        String?
  checkOutReason       String?
  checkInPhoto         String?
  checkOutPhoto        String?
  checkInDeviceSerial  String?
  checkOutDeviceSerial String?
  status               String // e.g., "checked-in", "checked-out", "incomplete"
  isManualEntry        Boolean   @default(false)
  timeEntries           TimeEntry[]
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  @@index([employeeId, date])
  user              User @relation(fields: [employeeId], references: [employeeId])
}

model ProcessedAttendance {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  date               DateTime
  checkIn            String?
  checkOut           String?
  status             String
  regularHours       Float
  overtimeHours      Float?
  isEarlyCheckIn     Boolean?
  isLateCheckIn      Boolean?
  isLateCheckOut     Boolean?
  isOvertime         Boolean
  detailedStatus     String
  overtimeDuration   Float
  checkInDeviceSerial  String?
  checkOutDeviceSerial String?
  isManualEntry      Boolean

  @@index([employeeId, date])
}

model TimeEntry {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  employeeId            String   
  user              User @relation(fields: [employeeId], references: [employeeId])
  date              DateTime
  startTime         DateTime
  endTime           DateTime
  regularHours      Float
  overtimeHours     Float
  status            String
  attendanceId      String?   @db.ObjectId
  attendance        Attendance? @relation(fields: [attendanceId], references: [id])
  overtimeRequestId String?   @db.ObjectId
  overtimeRequest   OvertimeRequest? @relation(fields: [overtimeRequestId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model PotentialOvertime {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String   
  user       User     @relation(fields: [employeeId], references: [employeeId])
  date       DateTime
  hours      Float
  type       String // 'early-check-in', 'late-check-out', 'day-off'
  status     String // 'pending', 'approved', 'rejected'
  periods    Json?    // Store the overtime periods as JSON
  reviewedBy String?  @db.ObjectId
  reviewedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CheckPoint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId    String   @db.ObjectId
  jobTitle  String
  timestamp DateTime @default(now())
  latitude  Float
  longitude Float
  address   String?

  user              User @relation(fields: [employeeId], references: [employeeId])
}

model PayrollPeriod {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PayrollProcessingResult {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  periodStart        DateTime
  periodEnd          DateTime
  totalWorkingDays   Int
  totalPresent       Int
  totalAbsent        Int
  totalOvertimeHours Float
  totalRegularHours  Float
  processedData      String   // Stored as JSON string
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [employeeId], references: [employeeId])

  @@index([employeeId, periodStart, periodEnd])
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  name        String
  localName   String?
  types       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@unique([date, name], name: "date_date")
}

model DepartmentDayOff {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  departmentId String   @db.ObjectId
  date         DateTime
  reason       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  department   Department @relation(fields: [departmentId], references: [id])
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  defaultShiftId String? @db.ObjectId
  defaultShift  Shift?  @relation(fields: [defaultShiftId], references: [id])
  daysOff   DepartmentDayOff[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NoWorkDay {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
