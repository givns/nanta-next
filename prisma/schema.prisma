datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

enum UserRole {
  Employee
  SuperAdmin
  Manager
  Admin
  Operation
  Driver
}

enum EmployeeType {
  Probation
  Fulltime
  Parttime
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId              String                   @unique
  name                    String
  lineUserId              String?                  @unique
  nickname                String?
  departmentName          String
  department              Department?              @relation(fields: [departmentId], references: [id])
  departmentId            String?                  @db.ObjectId
  role                    String
  company                 String?
  employeeType            EmployeeType             @default(Probation)
  isGovernmentRegistered  String                   @default("No")
  profilePictureUrl       String?
  shiftId                 String?                  @db.ObjectId
  shiftCode               String?
  assignedShift           Shift?                   @relation("UserAssignedShift", fields: [shiftId], references: [id])
  overtimeHours           Float                    @default(0)
  attendances             Attendance[]
  shiftAdjustmentRequests ShiftAdjustmentRequest[]
  leaveRequests           LeaveRequest[]
  sickLeaveBalance        Int                      @default(30)
  businessLeaveBalance    Int                      @default(3)
  annualLeaveBalance      Int                      @default(6)
  isPreImported           String                   @default("No")
  overtimeRequests        OvertimeRequest[]
  approvedOvertimeRequests OvertimeRequest[]       @relation("OvertimeApprover")
  payrollProcessingResults PayrollProcessingResult[]
  checkPoints             CheckPoint[]
  timeEntries             TimeEntry[]
  isRegistrationComplete  String                   @default("No")
  updatedAt               DateTime?                 @updatedAt
}

model Shift {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  shiftCode               String                   @unique
  name                    String
  startTime               String
  endTime                 String
  workDays                Int[]
  departments             Department[]
  assignedUsers           User[]                   @relation("UserAssignedShift")
  shiftAdjustmentRequests ShiftAdjustmentRequest[] @relation("RequestedShift")
}

model ShiftAdjustmentRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String  
  user              User     @relation(fields: [employeeId], references: [employeeId])
  requestedShiftId  String   @db.ObjectId
  requestedShift    Shift    @relation("RequestedShift", fields: [requestedShiftId], references: [id])
  date              DateTime
  reason            String
  status            String   // 'pending', 'approved', 'rejected'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LeaveRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String   
  user              User     @relation(fields: [employeeId], references: [employeeId])
  leaveType         String
  leaveFormat       String
  reason            String
  startDate         DateTime
  endDate           DateTime
  status            String
  fullDayCount      Float
  approverId        String?  @db.ObjectId
  denierId          String?
  denialReason      String?
  resubmitted       Boolean  @default(false)
  originalRequestId String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([employeeId, startDate, endDate, status])
}

model OvertimeRequest {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String   
  name               String
  user               User            @relation(fields: [employeeId], references: [employeeId])
  date               DateTime
  startTime          String          // Store as HH:mm
  endTime            String          // Store as HH:mm
  status             String          // 'pending_response', 'pending', 'approved', 'rejected', 'declined_by_employee'
  employeeResponse   String?         // 'accepted', 'declined', or null
  reason             String?
  approverId         String?         @db.ObjectId
  approver           User?           @relation("OvertimeApprover", fields: [approverId], references: [id])
  isDayOffOvertime   Boolean         @default(false)
  overtimeEntries    OvertimeEntry[]
  timeEntries        TimeEntry[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([employeeId, date, status])
}

model Attendance {
  id                   String                @id @default(cuid()) @map("_id")
  employeeId           String   
  date                 DateTime
  isDayOff             Boolean               @default(false)
  shiftStartTime       DateTime?
  shiftEndTime         DateTime?
  regularCheckInTime   DateTime?
  regularCheckOutTime  DateTime?
  overtimeEntries      OvertimeEntry[]
  isEarlyCheckIn       Boolean?
  isLateCheckIn        Boolean?
  isLateCheckOut       Boolean?
  checkInLocation      Json?
  checkOutLocation     Json?
  checkInAddress       String?
  checkOutAddress      String?
  checkInReason        String?
  checkInPhoto         String?
  checkOutPhoto        String?
  status               String                // e.g., "checked-in", "checked-out", "incomplete"
  isManualEntry        Boolean               @default(false)
  timeEntries          TimeEntry[]
  attendancePayrollPeriods AttendancePayrollPeriod[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  version              Int                   @default(0)
  user                 User                  @relation(fields: [employeeId], references: [employeeId])

  @@index([employeeId, date])
}

model TimeEntry {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String   
  user              User                  @relation(fields: [employeeId], references: [employeeId])
  date              DateTime
  startTime         DateTime
  endTime           DateTime?
  regularHours      Float
  overtimeHours     Float
  status            String                // "in_progress", "completed"
  attendanceId      String?   
  attendance        Attendance?           @relation(fields: [attendanceId], references: [id])
  overtimeRequestId String?               @db.ObjectId
  overtimeRequest   OvertimeRequest?      @relation(fields: [overtimeRequestId], references: [id])
  entryType         String                // "regular", "overtime"
  timeEntryPayrollPeriods TimeEntryPayrollPeriod[]

  @@index([employeeId, date])
}

model PayrollPeriod {
  id          String                    @id @default(auto()) @map("_id") @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  attendancePayrollPeriods AttendancePayrollPeriod[]
  timeEntryPayrollPeriods TimeEntryPayrollPeriod[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model AttendancePayrollPeriod {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  attendanceId    String
  attendance      Attendance    @relation(fields: [attendanceId], references: [id])
  payrollPeriodId String        @db.ObjectId
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])

  @@unique([attendanceId, payrollPeriodId])
}

model TimeEntryPayrollPeriod {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  timeEntryId     String        @db.ObjectId
  timeEntry       TimeEntry     @relation(fields: [timeEntryId], references: [id])
  payrollPeriodId String        @db.ObjectId
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])

  @@unique([timeEntryId, payrollPeriodId])
}

model OvertimeEntry {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  attendanceId      String          @db.ObjectId
  attendance        Attendance      @relation(fields: [attendanceId], references: [id])
  overtimeRequestId String          @db.ObjectId
  overtimeRequest   OvertimeRequest @relation(fields: [overtimeRequestId], references: [id])
  actualStartTime   DateTime
  actualEndTime     DateTime?
  
  @@index([attendanceId, overtimeRequestId])
}

model CheckPoint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String   
  user      User     @relation(fields: [employeeId], references: [employeeId])
  jobTitle  String
  timestamp DateTime @default(now())
  latitude  Float
  longitude Float
  address   String?
}

model PayrollProcessingResult {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String
  periodStart        DateTime
  periodEnd          DateTime
  totalWorkingDays   Int
  totalPresent       Int
  totalAbsent        Int
  totalOvertimeHours Float
  totalRegularHours  Float
  processedData      String   // Stored as JSON string
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [employeeId], references: [employeeId])

  @@index([employeeId, periodStart, periodEnd])
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  name        String
  localName   String?
  types       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@unique([date, name], name: "date_date")
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  defaultShiftId String? @db.ObjectId
  defaultShift  Shift?  @relation(fields: [defaultShiftId], references: [id])
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NoWorkDay {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
