datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DRIVER
  OPERATION
  GENERAL
  ADMIN
  SUPERADMIN
}

enum CheckInType {
  IN
  OUT
  CHECKPOINT
  LEAVE_PREMISES
  RETURN_PREMISES
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  lineUserId        String             @unique
  name              String
  nickname          String
  department        String
  employeeNumber    String?
  role              UserRole
  profilePictureUrl String?
  createdAt         DateTime           @default(now())
  leaveRequests     LeaveRequest[]
  overtimeRequests  OvertimeRequest[]
  checkIns          CheckIn[]
  trackingSessions TrackingSession[]
  checkPoints       CheckPoint[]  
}

model LeaveRequest {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  userId            String     @db.ObjectId
  user              User       @relation(fields: [userId], references: [id])
  leaveType         String
  leaveFormat       String
  reason            String
  startDate         DateTime
  endDate           DateTime
  status            String
  fullDayCount      Float
  approverId        String?
  denialReason      String?
  resubmitted       Boolean    @default(false)
  originalRequestId String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model OvertimeRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  date      DateTime
  hours     Int
  reason    String
  status    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model CheckIn {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @db.ObjectId
  address        String?
  reason         String?
  checkpointName String?
  photo          String
  timestamp      DateTime  @default(now())
  checkOutTime   DateTime?
  createdAt      DateTime   @default(now())
}

model TrackingSession {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @db.ObjectId
  startTime DateTime
  endTime   DateTime?
  locations GpsLocation[]
}

model GpsLocation {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  trackingSession   TrackingSession @relation(fields: [trackingSessionId], references: [id])
  trackingSessionId String          @db.ObjectId
  latitude          Float
  longitude         Float
  timestamp         DateTime
}

model CheckPoint {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  jobTitle   String
  timestamp  DateTime    @default(now())
  latitude   Float
  longitude  Float
  address    String?
}
