datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

enum UserRole {
  Employee
  SuperAdmin
  Manager
  Admin
  Operation
  Driver
  Sales
}

enum EmployeeType {
  Probation
  Fulltime
  Parttime
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId              String                   @unique
  name                    String
  lineUserId              String?                  @unique
  nickname                String?
  departmentName          String
  department              Department?              @relation(fields: [departmentId], references: [id])
  departmentId            String?                  @db.ObjectId
  role                    String
  company                 String?
  employeeType            EmployeeType             @default(Probation)
  isGovernmentRegistered  String                   @default("No")
  workStartDate           DateTime?
  profilePictureUrl       String?
  shiftId                 String?                  @db.ObjectId
  shiftCode               String?
  assignedShift           Shift?                   @relation("UserAssignedShift", fields: [shiftId], references: [id])
  overtimeHours           Float                    @default(0)
  attendances             Attendance[]
  shiftAdjustmentRequests ShiftAdjustmentRequest[]
  leaveRequests           LeaveRequest[]
  sickLeaveBalance        Int                      @default(30)
  businessLeaveBalance    Int                      @default(3)
  annualLeaveBalance      Int                      @default(6)
  isPreImported           String                   @default("No")
  overtimeRequests        OvertimeRequest[]
  approvedOvertimeRequests OvertimeRequest[]       @relation("OvertimeApprover")
  payrolls           Payroll[]
  processedPayrolls  PayrollProcessingResult[] @relation("EmployeePayrollResults")
  salesCommissions   SalesCommission[]         @relation("EmployeeCommissions")
  payrollAdjustments      PayrollAdjustment[]
  baseSalary              Float?
  salaryType              String?    // "hourly" or "monthly"
  bankAccountNumber       String?
  checkPoints             CheckPoint[]
  timeEntries             TimeEntry[]
  isRegistrationComplete  String                   @default("No")
  updatedAt               DateTime?                 @updatedAt
}

model CommissionTier {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  minAmount      Float    // Lower bound of sales amount
  maxAmount      Float?   // Upper bound (null for unlimited)
  percentage     Float    // Commission percentage
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CommissionBonus {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  type              String   // 'quarterly' or 'yearly'
  targetAmount      Float    // Sales target amount
  requiredMonths    Int     // Number of consecutive months required
  bonusAmount       Float    // Bonus amount to be paid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model SalesCommission {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId      String
  employee        User     @relation("EmployeeCommissions", fields: [employeeId], references: [employeeId])
  periodStart     DateTime
  periodEnd       DateTime
  salesAmount     Float
  commissionRate  Float
  commissionAmount Float
  quarterlyBonus  Float?
  yearlyBonus     Float?
  status          String   // 'calculated', 'approved', 'paid'
  payrollId       String?  @db.ObjectId
  payroll         Payroll? @relation(fields: [payrollId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([employeeId, periodStart, periodEnd])
  @@index([status])
}

model Shift {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  shiftCode               String                   @unique
  name                    String
  startTime               String
  endTime                 String
  workDays                Int[]
  departments             Department[]
  assignedUsers           User[]                   @relation("UserAssignedShift")
  shiftAdjustmentRequests ShiftAdjustmentRequest[] @relation("RequestedShift")
}

model ShiftAdjustmentRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String  
  user              User     @relation(fields: [employeeId], references: [employeeId])
  requestedShiftId  String   @db.ObjectId
  requestedShift    Shift    @relation("RequestedShift", fields: [requestedShiftId], references: [id])
  date              DateTime
  reason            String
  status            String   // 'pending', 'approved', 'rejected'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LeaveRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String   
  user              User     @relation(fields: [employeeId], references: [employeeId])
  leaveType         String
  leaveFormat       String
  reason            String
  startDate         DateTime
  endDate           DateTime
  status            String
  fullDayCount      Float
  approverId        String?  @db.ObjectId
  denierId          String?
  denialReason      String?
  resubmitted       Boolean  @default(false)
  originalRequestId String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([employeeId, startDate, endDate, status])
  @@index([status, startDate])
}

model LeaveSettings {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  annualLeaveDefault        Int      @default(6)
  sickLeaveDefault         Int      @default(30)
  businessLeaveDefault     Int      @default(3)
  minServiceForAnnualLeave Int      @default(4)
  maxConsecutiveSickDays   Int      @default(3)
  requireMedicalCertificate Boolean  @default(true)
  medicalCertificateThreshold Int    @default(3)
  allowHalfDayLeave        Boolean  @default(true)
  maxAdvanceBookingDays    Int      @default(90)
  minAdvanceNotice         Int      @default(1)
  allowLeaveCarryOver      Boolean  @default(true)
  maxCarryOverDays        Int      @default(5)
  carryOverExpiryMonths    Int      @default(3)
  requireManagerApproval    Boolean  @default(true)
  autoApproveEmergency     Boolean  @default(false)
  updatedAt                DateTime @updatedAt
  updatedBy                String
}

model OvertimeRequest {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  employeeId         String   
  name               String
  user               User            @relation(fields: [employeeId], references: [employeeId])
  date               DateTime
  startTime          String          // Store as HH:mm
  endTime            String          // Store as HH:mm
  status             String          // 'pending_response', 'pending', 'approved', 'rejected', 'declined_by_employee'
  employeeResponse   String?         // 'accepted', 'declined', or null
  reason             String?
  approverId         String?         @db.ObjectId
  approver           User?           @relation("OvertimeApprover", fields: [approverId], references: [id])
  isDayOffOvertime   Boolean         @default(false)
  isInsideShiftHours Boolean         @default(false)
  overtimeEntries    OvertimeEntry[]
  timeEntries        TimeEntry[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

 @@index([employeeId, date, status])
  @@index([status, date])
}

model OvertimeMetadata {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  timeEntryId      String    @unique @db.ObjectId
  timeEntry        TimeEntry @relation(fields: [timeEntryId], references: [id])
  isInsideShiftHours Boolean
  isDayOffOvertime   Boolean
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Attendance {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  employeeId           String   
  user                 User            @relation(fields: [employeeId], references: [employeeId])
  date                 DateTime
  isDayOff             Boolean         @default(false)
  shiftStartTime       DateTime?
  shiftEndTime         DateTime?
  regularCheckInTime   DateTime?
  regularCheckOutTime  DateTime?
  overtimeEntries      OvertimeEntry[]
  isEarlyCheckIn       Boolean?
  isLateCheckIn        Boolean?
  isLateCheckOut       Boolean?
  isVeryLateCheckOut   Boolean         @default(false)
  lateCheckOutMinutes  Int             @default(0)
  checkInLocation      Json?
  checkOutLocation     Json?
  checkInAddress       String?
  checkOutAddress      String?
  checkInReason        String?
  checkInPhoto         String?
  checkOutPhoto        String?
  status               String          // "checked-in", "checked-out", "incomplete"
  isManualEntry        Boolean         @default(false)
  timeEntries          TimeEntry[]
  version              Int             @default(0)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

   @@unique([employeeId, date], name: "employee_date_attendance")
  @@index([date, status])
}

model TimeEntry {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  employeeId        String   
  user              User      @relation(fields: [employeeId], references: [employeeId])
  date              DateTime
  startTime         DateTime
  endTime           DateTime?
  regularHours      Float
  overtimeHours     Float
  actualMinutesLate Int       @default(0)
  isHalfDayLate     Boolean   @default(false)
  status            String    // "in_progress", "completed"
  attendanceId      String?   @db.ObjectId
  attendance        Attendance? @relation(fields: [attendanceId], references: [id])
  overtimeRequestId String?   @db.ObjectId
  overtimeRequest   OvertimeRequest? @relation(fields: [overtimeRequestId], references: [id])
  entryType         String    // "regular", "overtime"
  overtimeMetadata  OvertimeMetadata?
  timeEntryPayrollPeriods TimeEntryPayrollPeriod[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([employeeId, date])
  @@index([attendanceId])
  @@index([date, status])
}

model OvertimeEntry {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  attendanceId      String          @db.ObjectId
  attendance        Attendance      @relation(fields: [attendanceId], references: [id])
  overtimeRequestId String          @db.ObjectId
  overtimeRequest   OvertimeRequest @relation(fields: [overtimeRequestId], references: [id])
  actualStartTime   DateTime
  actualEndTime     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  @@index([attendanceId, overtimeRequestId])
}

model Payroll {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId      String   
  user            User     @relation(fields: [employeeId], references: [employeeId])
  payrollPeriodId String   @db.ObjectId
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  
  // Hours
  regularHours    Float
  overtimeHoursByType Json    // Maps to PayrollHours.overtimeHours
  totalOvertimeHours Float
  
  // Attendance
  totalWorkingDays   Int
  totalPresent       Int
  totalAbsent        Int
  totalLateMinutes   Int
  earlyDepartures    Int
  
  // Leaves
  sickLeaveDays      Float
  businessLeaveDays  Float
  annualLeaveDays    Float
  unpaidLeaveDays    Float
  holidays           Int
  
  // Rates
  regularHourlyRate  Float
  overtimeRatesByType Json  // Maps to PayrollRates.overtimeRates
  
  // Calculations
  basePay            Float
  overtimePayByType  Json   // Maps to PayrollCalculation.overtimePay
  totalOvertimePay   Float
  
  // Allowances
  transportationAllowance Float @default(0)
  mealAllowance    Float    @default(0)
  housingAllowance Float    @default(0)
  totalAllowances  Float    @default(0)
  
  // Deductions
  socialSecurity   Float    @default(0)
  tax             Float    @default(0)
  unpaidLeaveDeduction Float @default(0)
  totalDeductions Float    @default(0)
  
  // Commission
  salesAmount     Float?
  commissionRate  Float?
  commissionAmount Float?
  quarterlyBonus  Float?
  yearlyBonus    Float?
  
  netPayable      Float
  status          PayrollStatus @default(draft)
  processingNote  String?
  
  // Approval
  approvedBy      String?
  approvedAt      DateTime?
  lastModifiedBy  String?
  
  salesCommissions SalesCommission[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([employeeId, payrollPeriodId], name: "employee_period")
  @@index([payrollPeriodId, status])
  @@index([employeeId, status])
}

enum PayrollStatus {
  draft
  processing
  completed
  approved
  paid
}

model PayrollSettings {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  overtimeRates  Json     // Maps to PayrollSettings.overtimeRates
  allowances     Json     // Maps to PayrollSettings.allowances
  deductions     Json     // Maps to PayrollSettings.deductions
  rules          Json     // Maps to PayrollSettings.rules
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PayrollPeriod {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  status      String   // matches PayrollStatus type
  payrolls    Payroll[]
  timeEntryPayrollPeriods TimeEntryPayrollPeriod[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([startDate, endDate], name: "period_range")
}

model PayrollProcessingSession {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  periodYearMonth   String
  status            String    // 'processing', 'completed', 'error'
  totalEmployees    Int
  processedCount    Int
  error             String?
  approvedBy        String?
  approvedAt        DateTime?
  results           PayrollProcessingResult[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([periodYearMonth, status])
}

model PayrollProcessingResult {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionId      String    @db.ObjectId
  session        PayrollProcessingSession @relation(fields: [sessionId], references: [id])
  employeeId     String
  employee       User      @relation("EmployeePayrollResults", fields: [employeeId], references: [employeeId])
  periodStart    DateTime
  periodEnd      DateTime
  processedData  String    // JSON string of PayrollCalculationResult
  status         String    // 'completed', 'error'
  error          String?   // Error message if status is 'error'
  errorDetails   Json?     // Detailed error information including stack trace if needed
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([employeeId, periodStart, periodEnd])
}

model PayrollAdjustment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String
  user        User     @relation(fields: [employeeId], references: [employeeId])
  type        String   // 'bonus', 'deduction', 'correction'
  amount      Float
  reason      String
  periodStart DateTime
  periodEnd   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employeeId, periodStart, periodEnd])
}

model TimeEntryPayrollPeriod {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  timeEntryId     String        @db.ObjectId
  timeEntry       TimeEntry     @relation(fields: [timeEntryId], references: [id])
  payrollPeriodId String        @db.ObjectId
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  status          String        // 'pending', 'processed'
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
   @@unique([timeEntryId, payrollPeriodId], name: "time_entry_period")
  @@index([payrollPeriodId, status])
}

model CheckPoint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId String   
  user      User     @relation(fields: [employeeId], references: [employeeId])
  jobTitle  String
  timestamp DateTime @default(now())
  latitude  Float
  longitude Float
  address   String?
}

model Holiday {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  name        String
  localName   String?
  types       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  @@unique([date, name], name: "date_date")
}

model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  defaultShiftId String? @db.ObjectId
  defaultShift  Shift?  @relation(fields: [defaultShiftId], references: [id])
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model NoWorkDay {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
