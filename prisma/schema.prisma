datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  DRIVER
  OPERATION
  GENERAL
  ADMIN
  SUPERADMIN
}

model User {
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId              String                   @unique
  name                    String
  lineUserId              String?                  @unique
  nickname                String?
  department              String?
  role                    String
  profilePictureUrl       String?
  shiftId              String    @db.ObjectId
  assignedShift        Shift     @relation("UserAssignedShift", fields: [shiftId], references: [id])
  overtimeHours        Float     @default(0)
  attendances             Attendance[]
  shiftAdjustmentRequests ShiftAdjustmentRequest[]
  leaveRequests           LeaveRequest[]
  overtimeRequests        OvertimeRequest[]
  checkPoints             CheckPoint[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model Shift {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  shiftCode String @unique
  name      String
  startTime String
  endTime   String
   assignedUsers        User[]    @relation("UserAssignedShift")
  shiftAdjustmentRequests ShiftAdjustmentRequest[] @relation("RequestedShift")
}

model ShiftAdjustmentRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  requestedShiftId  String   @db.ObjectId
  requestedShift    Shift    @relation("RequestedShift", fields: [requestedShiftId], references: [id])
  date              DateTime
  reason            String
  status            String   // 'pending', 'approved', 'rejected'
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model LeaveRequest {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  leaveType         String
  leaveFormat       String
  reason            String
  useOvertimeHours  Boolean
  startDate         DateTime
  endDate           DateTime
  status            String
  fullDayCount      Float
  approverId        String?  @db.ObjectId
  denialReason      String?
  resubmitted       Boolean  @default(false)
  originalRequestId String?  @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model OvertimeRequest {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  startTime String // Store as HH:mm
  endTime   String // Store as HH:mm
  status    String // 'pending', 'approved', 'rejected'
   reason        String?  // Add this line
  denialReason  String?  // Add this line
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id                   String    @id @default(cuid()) @map("_id")
  userId               String    @db.ObjectId
  date                 DateTime
  checkInTime          DateTime
  checkOutTime         DateTime?
  overtimeStartTime    DateTime?
  overtimeEndTime      DateTime?
  checkInLocation      Json
  checkOutLocation     Json?
  checkInAddress       String?
  checkOutAddress      String?
  checkInReason        String?
  checkOutReason       String?
  checkInPhoto         String
  checkOutPhoto        String?
  checkInDeviceSerial  String?
  checkOutDeviceSerial String?
  status               String // e.g., "checked-in", "checked-out", "incomplete"
  isManualEntry        Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model CheckPoint {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  jobTitle  String
  timestamp DateTime @default(now())
  latitude  Float
  longitude Float
  address   String?

  user User @relation(fields: [userId], references: [id])
}

